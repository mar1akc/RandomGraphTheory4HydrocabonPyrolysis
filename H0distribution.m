function [P_distr,uflag,u,S] = H0distribution(p,N)
tol = 1e-14;
plength = length(p);
maxdegree = plength-1;
kvector = (0:maxdegree)';
q = zeros(maxdegree,1); % excess degree distribution generated by G1
meandegree = kvector'*p; % mean degree
q = kvector(2:end).*p(2:end)/meandegree; % qk = (k+1)p_{k+1}/meandegree
%
%% compute H0 depending on max degree
uflag = 0;
u = 1;
S = 0;
if maxdegree == 2 % chain model, completely analytic   
    % compute derivatives analytically
    C = zeros(N,1); % component size distribution
    C(1) = p(1); %p0;
    C(2) = p(2)*q(1);%p1*q0;
    C(3) = p(2)*q(1)*q(2) + p(3)*q(1)^2; %p1*q0*q1+p2*q0^2;
    C(4:N) = q(1)*q(2).^(1:N-3).*(p(2)*q(2)+(2:N-2)*p(3)*q(1));   %q0*q1.^(1:N-3).*(p1*q1+(2:N-2)*p2*q0);
else
    if maxdegree == 3
        G0 = @(x)p(1)+p(2)*x+p(3)*x.^2+p(4).*x.^3;
        G1 = @(x) q(1) + x*q(2) + x.^2*q(3);
        H1 = @(x)2*x*q(1)./((1-x*q(2))+sqrt((1-x*q(2)).^2-4*x.^2*q(1)*q(3)));
        H0 = @(x)x.*G0(H1(x));
        % check if there is a giant component
        giantfun = -p(2) + 3*p(4);
        if giantfun < 0
            fprintf('There is no giant component\n');
        else
            root = sort(roots([q(3),q(2)-1,q(1)]),'ascend');
            u = root(1);
            fprintf('There is a giant component: u = %d\n',u);
            S = 1-G0(u);
            fprintf('Fraction in the giant component: %d\n',S);
            uflag = 1;
        end
    else % maxdegree = 4
        G0 = @(x)p(1) + p(2)*x + p(3)*x.^2 + p(4)*x.^3 + p(5)*x.^4;
        G1 = @(x)q(1) + q(2)*x + q(3)*x.^2 + q(4)*x.^3;
%        xG0 = @(x)x.*p(1) + p(2)*x.^2 + p(3)*x.^3 + p(4)*x.^4 + p(5)*x.^5;
        H1 = @(x)cubicroot(x,q);
        H0 = @(x)x.*G0(H1(x));
        % check if there is a giant component
        giantfun = -p(2) + 3*p(4) + 8*p(5);
        if giantfun < 0
            fprintf('There is no giant component\n');
        else
            root = sort(roots([q(4),q(3),q(2)-1,q(1)]),'ascend');
            ind = find(root>0 & root<1+tol);
            u = root(ind(1));
            fprintf('There is a giant component: u = %d\n',u);
            S = 1-G0(u);
            fprintf('Fraction in the giant component: %d\n',S);
            fprintf('u = H1(1) = %d, G0(u) = %d, 1-G0(u) = %d,  H0(1) = %d, 1-H0(1) = %d\n',H1(1),G0(u),1-G0(u), H0(1),1-H0(1));
            fprintf('H0(1) = x*G0(H1(x) = %d for x = 1\n',G0(H1(1)));
            uflag = 1;
        end
    end
     % compute derivatives of H0 using Cauchy formula
    npt = 1000;
    t = linspace(0,2*pi,npt+1)';
    tm = linspace(0,2*pi,2*npt+1)';
    tm(1:2:end) = [];
    r = 1;
    z = r*exp(1i*t);
    dz = circshift(z,[-1,0]) - z;
    dz(end) = [];
    zm = r*exp(1i*tm);
    P_distr = zeros(N,1);
    for n = 1 : N
        P_distr(n) = sum(dz.*H0(zm)./zm.^(n+1))*0.5/(pi*1i);
    end
end
P_distr = real(P_distr);
end
%%

function root = cubicroot(x,q)
a = q(4)*x;
b = q(3)*x;
c = q(2)*x-1;
d = q(1)*x;
D0 = b.^2-3*a.*c;
D1 = 2*b.^3-9*a.*b.*c + 27*a.^2.*d;
C = (0.5*(D1+sqrt(D1.^2-4*D0.^3))).^(1/3);
xi = -0.5 + 1i*0.5*sqrt(3);
xi2 = xi^2;
r0 = -(b+C+D0./C)./(3*a);
r1 = -(b+xi*C+D0./(C*xi))./(3*a);
r2 = -(b+C*xi2+D0./(C*xi2))./(3*a);
r012 = [r0,r1,r2];
% size(r012)
[~,jmin] = min(abs(r012),[],2);
imin = (1:length(x))';
ind = sub2ind([length(x),3],imin,jmin);
root = r012(ind);
end
